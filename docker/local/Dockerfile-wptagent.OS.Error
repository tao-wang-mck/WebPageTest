### IMPORTANT DOCKER COMMANDS ###

###     docker images                               - List images available
###     docker build <GITHUB-REPO-LINK> -t TAGNAME  - Builds the Dockerfile from the github repo
###     docker ps                                   - List running images
###     docker stop <IMAGE ID || IMAGE NAME>        - Stops running image with either --name <IMAGE NAME> || IMAGE ID>
###     docker run -it -d TAGNAME /bin/bash         - Runs bash
###     docker exec -it <IMAGE ID> /bin/bash        - Connects to bash for terminal execution (Needs to be running first)

### EXAMPLE DOCKER COMMANDS FOR RUNNING SERVER & AGENT

###     docker run -d -p 4000:80 <IMAGE ID || <IMAGE TAG>
###     docker run -d -p 4001:80 --network="host" -e "SERVER_URL=http://localhost:4000/work/" -e "LOCATION=Test" -e "-v" <IMAGE ID || <IMAGE TAG>

### INSTALLING METHOD ###

###     Recommend to install with "docker build <GITHUB-REPO-LINK> -t TAGNAME",
###     grabs the latest copy of WPT and build time on average takes 10 minutes. 

FROM --platform=linux/amd64 playwright/chromium:playwright-1.39.0
# FROM --platform=linux/arm64/v8 selenium/standalone-chrome:latest
# FROM ubuntu:20.04

### PREVENTs INTERACTIVE PROMPTS WHILE INSTALLING ###
ARG DEBIAN_FRONTEND=noninteractive

### UPDATE ###
# RUN apt-get clean && apt-get update --fix-missing

### COPYING ENTIRE DIR TO LOCAL DOCKER /wptagent
#COPY / /wptagent
USER root

RUN sed -i 's/archive.ubuntu.com/mirrors.aliyun.com/g' /etc/apt/sources.list \
&& sed -i 's/security.ubuntu.com/mirrors.aliyun.com/g' /etc/apt/sources.list
# RUN apt-get update

# Install software 
# RUN apt-get install -y git npm
# RUN node --version
# RUN npm install -g lighthouse
# #COPY docker/linux-headless/entrypoint.sh /wptagent/entrypoint.sh

# ### UPDATE ###
# # RUN apt-get update 

# RUN apt --fix-broken install -y && apt install -y libatk1.0-0 libatk-bridge2.0-0 libcups2 libxkbcommon-x11-0 \
# libxdamage1 libgbm-dev libpangocairo-1.0-0

# ### INSTALL APT-GET LIBS ###
# COPY docker/local/agent/docker-apt-get.txt /wptagent/.github/workflows/docker-apt-get.txt
# RUN xargs -a /wptagent/.github/workflows/docker-apt-get.txt apt-get install --no-install-recommends --yes

# WORKDIR /
# RUN rm -rf wptagent && git clone -b master https://github.com/WPO-Foundation/wptagent.git
# # USER pwuser
# WORKDIR /wptagent
# # ### UPGRADING PIP AND INSTALLING REQUIRED PACKAGES ###
# RUN python3 -m pip install -i https://pypi.mirrors.ustc.edu.cn/simple/ --upgrade --user pip && \
# python3 -m pip install -i https://pypi.mirrors.ustc.edu.cn/simple/ --default-timeout=1000 --user -r /wptagent/.github/workflows/requirements.txt


# # ### INSTALLING LIGHTHOUSE FROM NPM ###
# # RUN npm install -g lighthouse

# ### INSTALLING CHROME BROWSER ###
# ###     Fails to Find all libs needed to run
# # RUN wget https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb && \
# #     dpkg -i google-chrome-stable_current_amd64.deb; exit 0 && \
# #     apt -f install -y && \
# #     apt-get install google-chrome-stable

# ### BETTER INSTALLING CHROME BROWSER METHOD ###
# ###     Better Installing method but would like to change this to something less complex.
# # RUN wget -q -O - https://dl-ssl.google.com/linux/linux_signing_key.pub | apt-key add - \
# #     && echo "deb http://dl.google.com/linux/chrome/deb/ stable main" >> /etc/apt/sources.list.d/google.list
# # RUN apt-get update && apt-get -y install google-chrome-stable ; exit 0
# # RUN apt-get update --fix-missing -y
# # RUN apt-get install -f -y


# ### CLEAN UP ###
# #       We could add some clean up here but in testing it was negotiable

# RUN apt-get install -y dbus sssd-dbus apt-transport-https dbus-user-session dbus-user-session
# RUN apt-get install -y sssd-dbus apt-transport-https
# RUN apt update && apt install -y dbus
# RUN mkdir -p /var/run/dbus
# RUN dbus-daemon --config-file=/usr/share/dbus-1/system.conf --print-address
# RUN service dbus start
# # RUN apt-get update && apt-get install -y firefox

# WORKDIR /wptagent
### COPY ENTRYPOINT ###
# COPY docker/local/agent/entrypoint.sh /wptagent/entrypoint.sh
# USER root
# RUN chmod +x /wptagent/entrypoint.sh

# RUN echo $(which chromium-browser); exit 0;
# RUN echo $(which chromium); exit 0;
# COPY browsers.ini /wptagent/browsers.ini

### /bin/bash LOCATION OF COMMAND EXECUTION ###
# ENTRYPOINT ["/wptagent/entrypoint.sh"]
# CMD ["python3","wptagent.py", "-vvvv", "--xvfb", "--server", "http://web/work/", "--location", "Test", "--key", "123456789"]
